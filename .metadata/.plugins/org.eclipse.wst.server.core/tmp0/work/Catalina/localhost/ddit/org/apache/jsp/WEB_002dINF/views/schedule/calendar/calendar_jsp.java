/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.57
 * Generated at: 2020-11-29 13:10:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.schedule.calendar;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class calendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(4);
    _jspx_dependants.put("jar:file:/C:/soo/A_TeachingMaterial/7.LastProject/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ddit/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
    _jspx_dependants.put("/WEB-INF/views/schedule/calendar/calendar_js.jsp", Long.valueOf(1606565342187L));
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1602513789311L));
    _jspx_dependants.put("jar:file:/C:/soo/A_TeachingMaterial/7.LastProject/workspace/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/ddit/WEB-INF/lib/jstl-1.2.jar!/META-INF/fmt.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fif_0026_005ftest;
  private org.apache.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems;

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems = org.apache.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
  }

  public void _jspDestroy() {
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.release();
    _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.release();
    _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.release();
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<link rel=\" shortcut icon\" href=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/image/favicon.ico\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/css/fullcalendar.min.css\" />\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/css/bootstrap.min.css\">\r\n");
      out.write("    <link rel=\"stylesheet\" href='");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/css/select2.min.css' />\r\n");
      out.write("    <link rel=\"stylesheet\" href='");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/css/bootstrap-datetimepicker.min.css' />\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Open+Sans:400,500,600\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/icon?family=Material+Icons\">\r\n");
      out.write("\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/css/main.css\">\r\n");
      out.write("    \r\n");
      out.write("    <style>\r\n");
      out.write("    \t.fc-button{\r\n");
      out.write("    \t\tbackground-color: #0069d9;\r\n");
      out.write("    \t\tborder-color: #0062cc;\r\n");
      out.write("    \t\tcolor:#fff;\r\n");
      out.write("    \t}\r\n");
      out.write("    </style>\r\n");
      out.write("<body>\r\n");
      out.write("\t<div class=\"content-body\">\r\n");
      out.write("    <div class=\"container\" id=\"container\">\r\n");
      out.write("    \r\n");
      out.write("    <div id=\"contextMenu\"  class=\"dropdown clearfix\">\r\n");
      out.write("            <ul class=\"dropdown-menu dropNewEvent\" role=\"menu\" aria-labelledby=\"dropdownMenu\"\r\n");
      out.write("                style=\"display:block;position:static;margin-bottom:5px;\">\r\n");
      out.write("                ");
      if (_jspx_meth_c_005fforEach_005f0(_jspx_page_context))
        return;
      out.write("<li class=\"divider\"></li>\r\n");
      out.write("                <li><a tabindex=\"-1\" href=\"#\" data-role=\"close\">Close</a></li>\r\n");
      out.write("            </ul>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("        <div id=\"wrapper\">\r\n");
      out.write("            <div id=\"loading\"></div>\r\n");
      out.write("            <div id=\"calendar\"></div>\r\n");
      out.write("        </div>\r\n");
      out.write("\r\n");
      out.write("<!-- \t\t<div class=\"box-body\"> -->\r\n");
      out.write("        <!-- 일정 추가 MODAL -->\r\n");
      out.write("        <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" id=\"eventModal\">\r\n");
      out.write("            <div class=\"modal-dialog\" role=\"document\" style=\"margin-top: 250px;\">\r\n");
      out.write("                <div class=\"modal-content\">\r\n");
      out.write("                    <div class=\"modal-header\">\r\n");
      out.write("                        <h4 class=\"modal-title\"></h4>\r\n");
      out.write("                        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span\r\n");
      out.write("                                aria-hidden=\"true\">&times;</span></button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"modal-body\">\r\n");
      out.write("\r\n");
      out.write("                                <input class=\"inputModal\" type=\"text\" name=\"edit-id\" id=\"edit-id\"\r\n");
      out.write("                                    required=\"required\" hidden=\"true\" />\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-xs-12\">\r\n");
      out.write("                                <label class=\"col-xs-4\" for=\"edit-title\">일정명</label>\r\n");
      out.write("                                <input class=\"inputModal\" type=\"text\" name=\"edit-title\" id=\"edit-title\" maxlength=\"30\"\r\n");
      out.write("                                    required=\"required\" />\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-xs-12\">\r\n");
      out.write("                                <label class=\"col-xs-4\" for=\"edit-start\">시작</label>\r\n");
      out.write("                                <input class=\"inputModal\" type=\"text\" name=\"edit-start\"  id=\"edit-start\" />\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-xs-12\">\r\n");
      out.write("                                <label class=\"col-xs-4\" for=\"edit-end\">끝</label>\r\n");
      out.write("                                <input class=\"inputModal\" type=\"text\" name=\"edit-end\" id=\"edit-end\" />\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-xs-12\">\r\n");
      out.write("                                <label class=\"col-xs-4\" for=\"edit-type\">구분</label>\r\n");
      out.write("                                <select class=\"inputModal\" name=\"edit-type\" id=\"edit-type\"  >\r\n");
      out.write("                                    <option value=\"\">선택하세요</option>\r\n");
      out.write("                                    ");
      if (_jspx_meth_c_005fforEach_005f1(_jspx_page_context))
        return;
      out.write("</select>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-xs-12\">\r\n");
      out.write("                                <label class=\"col-xs-4\" for=\"edit-color\">색상</label>\r\n");
      out.write("                                <select class=\"inputModal\" name=\"color\" id=\"edit-color\">\r\n");
      out.write("                                    <option value=\"#D25565\" style=\"color:#D25565;\">빨간색</option>\r\n");
      out.write("                                    <option value=\"#9775fa\" style=\"color:#9775fa;\">보라색</option>\r\n");
      out.write("                                    <option value=\"#ffa94d\" style=\"color:#ffa94d;\">주황색</option>\r\n");
      out.write("                                    <option value=\"#74c0fc\" style=\"color:#74c0fc;\">파란색</option>\r\n");
      out.write("                                    <option value=\"#f06595\" style=\"color:#f06595;\">핑크색</option>\r\n");
      out.write("                                    <option value=\"#63e6be\" style=\"color:#63e6be;\">연두색</option>\r\n");
      out.write("                                    <option value=\"#a9e34b\" style=\"color:#a9e34b;\">초록색</option>\r\n");
      out.write("                                    <option value=\"#4d638c\" style=\"color:#4d638c;\">남색</option>\r\n");
      out.write("                                    <option value=\"#495057\" style=\"color:#495057;\">검정색</option>\r\n");
      out.write("                                </select>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                        <div class=\"row\">\r\n");
      out.write("                            <div class=\"col-xs-12\">\r\n");
      out.write("                                <label class=\"col-xs-4\" for=\"edit-desc\">설명</label>\r\n");
      out.write("                                <textarea rows=\"4\" cols=\"50\" class=\"inputModal\" name=\"edit-desc\" maxlength=\"100\"\r\n");
      out.write("                                    id=\"edit-desc\"></textarea>\r\n");
      out.write("                            </div>\r\n");
      out.write("                        </div>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"modal-footer modalBtnContainer-addEvent\">\r\n");
      out.write("                        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">취소</button>\r\n");
      out.write("                        <button type=\"button\" class=\"btn btn-primary\" id=\"save-event\">저장</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                    <div class=\"modal-footer modalBtnContainer-modifyEvent\">\r\n");
      out.write("                    \r\n");
      out.write("                        <button type=\"button\" class=\"btn btn-default\" data-dismiss=\"modal\">닫기</button>\r\n");
      out.write("                        <button type=\"button\" class=\"btn btn-danger\" name = \"deleteEvent\" id=\"deleteEvent\">삭제</button>\r\n");
      out.write("                        <button type=\"button\" class=\"btn btn-primary\" name = \"updateEvent\" id=\"updateEvent\">수정</button>\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div><!-- /.modal-content -->\r\n");
      out.write("            </div><!-- /.modal-dialog -->\r\n");
      out.write("        </div><!-- /.modal -->\r\n");
      out.write("        \r\n");
      out.write("        <!-- /.filter panel -->\r\n");
      out.write("   \t </div>\r\n");
      out.write("    </div>\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("<!-- </div> -->\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(document).ready(function(){\r\n");
      out.write("\t\r\n");
      out.write("\t$(':button').toggleClass(\"fc-state-default\");\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("var addBtnContainer = $('.modalBtnContainer-addEvent');\r\n");
      out.write("$('#save-event').on('click',function(e){\r\n");
      out.write("\t\r\n");
      out.write("// \talert($('input[name=\"edit-end\"]').val());\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype:\"POST\",\r\n");
      out.write("\t\turl :\"");
      out.print( request.getContextPath() );
      out.write("/schedule/schedule/regist.do\",\r\n");
      out.write("\t\tdata : {\r\n");
      out.write("\t\t\t\tschedule_category_no : $('#edit-type').val(),\r\n");
      out.write("\t\t\t  \tschedule_title: $('#edit-title').val(),\r\n");
      out.write("\t\t\t\tschedule_content  : $('#edit-desc').val(),\r\n");
      out.write("\t\t\t\tschedule_color :$('#edit-color').val(),\r\n");
      out.write("\t\t\t\tschedule_start_date : $('input[name=\"edit-start\"]').val(),\r\n");
      out.write("\t\t\t\tschedule_end_date : $('input[name=\"edit-end\"]').val()\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\r\n");
      out.write("\tsuccess:function(result){\r\n");
      out.write("\t\talert(result);\r\n");
      out.write("\t\tif(result == \"SUCCESS\"){\r\n");
      out.write("\t\talert(\"등록되었습니다.\");\r\n");
      out.write("\t\t}else if(result == \"FAIL\"){\r\n");
      out.write("\t\t\talert(\"이미 등록된 일정과 겹칩니다.\")\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t}else{\r\n");
      out.write("\t\tlocation.href=\"../../counsel/create/meetings.do?counsel_no=\"+result;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t},\r\n");
      out.write("\terror:function(error){\r\n");
      out.write("\t\talert('등록 실패했습니다.');\t\t\r\n");
      out.write("\t},\r\n");
      out.write("\tcomplete:function(){\r\n");
      out.write("\t\t\taddBtnContainer.hide();\r\n");
      out.write("// \t\t\tlocation.href=\"../../counsel/create/meetings.do\";\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tlocation.reload(true);\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$('#deleteEvent').on('click',function(e){\r\n");
      out.write("\tvar schedule_no = $('input[name=\"edit-id\"]').val();\r\n");
      out.write("\talert(schedule_no);\r\n");
      out.write("\t\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype:\"POST\",\r\n");
      out.write("\t\turl :\"");
      out.print( request.getContextPath() );
      out.write("/schedule/schedule/remove.do\",\r\n");
      out.write("\t\tdata : {\r\n");
      out.write("\t\t\t\tschedule_no : schedule_no\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\r\n");
      out.write("\tsuccess:function(result){\r\n");
      out.write("\t\talert(\"삭제되었습니다.\");\t\t\r\n");
      out.write("\t},\r\n");
      out.write("\terror:function(error){\r\n");
      out.write("\t\talert('삭제 실패했습니다.');\t\t\r\n");
      out.write("\t},\r\n");
      out.write("\tcomplete:function(){\r\n");
      out.write("\t\t\taddBtnContainer.hide();\r\n");
      out.write("\t\t\tlocation.href=\"../calendar/calendar.do\";\r\n");
      out.write("// \t\t\tlocation.reload(true);\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$('#updateEvent').on('click',function(e){\r\n");
      out.write("\tvar schedule_no = $('input[name=\"edit-id\"]').val();\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\ttype:\"POST\",\r\n");
      out.write("\t\turl :\"");
      out.print( request.getContextPath() );
      out.write("/schedule/schedule/modify.do\",\r\n");
      out.write("\t\tdata : {\r\n");
      out.write("\t\t\t\tschedule_no : schedule_no,\r\n");
      out.write("\t\t\t\tschedule_category_no : $('#schedule_category_no').val(),\r\n");
      out.write("\t\t\t  \tschedule_title: $('#edit-title').val(),\r\n");
      out.write("\t\t\t\tschedule_content  : $('#edit-desc').val(),\r\n");
      out.write("\t\t\t\tschedule_color :$('#edit-color').val(),\r\n");
      out.write("\t\t\t\tschedule_start_date : $('input[name=\"edit-start\"]').val(),\r\n");
      out.write("\t\t\t\tschedule_end_date : $('input[name=\"edit-end\"]').val()\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t},\r\n");
      out.write("\t\r\n");
      out.write("\tsuccess:function(result){\r\n");
      out.write("\t\talert(\"등록되었습니다.\");\t\t\r\n");
      out.write("\t},\r\n");
      out.write("\terror:function(error){\r\n");
      out.write("\t\talert('등록 실패했습니다.');\t\t\r\n");
      out.write("\t},\r\n");
      out.write("\tcomplete:function(){\r\n");
      out.write("\t\t\taddBtnContainer.hide();\r\n");
      out.write("// \t\t\tlocation.href=\"../calendar/calendar.do\";\r\n");
      out.write("\t\t\tlocation.reload(true);\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\t\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("\t<script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/jquery.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/bootstrap.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/moment.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/fullcalendar.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/ko.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/select2.min.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/vendor/js/bootstrap-datetimepicker.min.js\"></script>\r\n");
      out.write("\t<script src=\"");
      out.print(request.getContextPath() );
      out.write("/resources/js/moment.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("<!--\r\n");
      out.write("\r\n");
      out.write("//-->\r\n");
      out.write("\r\n");
      out.write("var draggedEventIsAllDay;\r\n");
      out.write("var activeInactiveWeekends = true;\r\n");
      out.write("\r\n");
      out.write("var calendar = $('#calendar').fullCalendar({\r\n");
      out.write("\r\n");
      out.write(" /** ******************\r\n");
      out.write("   *  OPTIONS\r\n");
      out.write("   * *******************/\r\n");
      out.write("  locale                    : 'ko',    \r\n");
      out.write("  timezone                  : \"local\", \r\n");
      out.write("  nextDayThreshold          : \"09:00:00\",\r\n");
      out.write("  allDaySlot                : true,\r\n");
      out.write("  displayEventTime          : true,\r\n");
      out.write("  displayEventEnd           : true,\r\n");
      out.write("  firstDay                  : 0, //월요일이 먼저 오게 하려면 1\r\n");
      out.write("  weekNumbers               : false,\r\n");
      out.write("  selectable                : true,\r\n");
      out.write("  weekNumberCalculation     : \"ISO\",\r\n");
      out.write("  eventLimit                : true,\r\n");
      out.write("  views                     : { \r\n");
      out.write("                                month : { eventLimit : 12 } // 한 날짜에 최대 이벤트 12개, 나머지는 + 처리됨\r\n");
      out.write("                              },\r\n");
      out.write("  eventLimitClick           : 'week', //popover\r\n");
      out.write("  navLinks                  : true,\r\n");
      out.write("  defaultDate               : '2020-11', //실제 사용시 현재 날짜로 수정\r\n");
      out.write("  timeFormat                : 'HH:mm',\r\n");
      out.write("  defaultTimedEventDuration : '01:00:00',\r\n");
      out.write("  editable                  : true,\r\n");
      out.write("  minTime                   : '00:00:00',\r\n");
      out.write("  maxTime                   : '24:00:00',\r\n");
      out.write("  slotLabelFormat           : 'HH:mm',\r\n");
      out.write("  weekends                  : true,\r\n");
      out.write("  nowIndicator              : true,\r\n");
      out.write("  dayPopoverFormat          : 'MM/DD dddd',\r\n");
      out.write("  longPressDelay            : 0,\r\n");
      out.write("  eventLongPressDelay       : 0,\r\n");
      out.write("  selectLongPressDelay      : 0,  \r\n");
      out.write("  header                    : {\r\n");
      out.write("                                left   : 'today, prevYear, nextYear, viewWeekends',\r\n");
      out.write("                                center : 'prev, title, next',\r\n");
      out.write("                                right  : 'month, agendaWeek, agendaDay, listWeek'\r\n");
      out.write("                              },\r\n");
      out.write("  views                     : {\r\n");
      out.write("                                month : {\r\n");
      out.write("                                  columnFormat : 'dddd'\r\n");
      out.write("                                },\r\n");
      out.write("                                agendaWeek : {\r\n");
      out.write("                                  columnFormat : 'M/D ddd',\r\n");
      out.write("                                  titleFormat  : 'YYYY년 M월 D일',\r\n");
      out.write("                                  eventLimit   : false\r\n");
      out.write("                                },\r\n");
      out.write("                                agendaDay : {\r\n");
      out.write("                                  columnFormat : 'dddd',\r\n");
      out.write("                                  eventLimit   : false\r\n");
      out.write("                                },\r\n");
      out.write("                                listWeek : {\r\n");
      out.write("                                  columnFormat : ''\r\n");
      out.write("                                }\r\n");
      out.write("                              },\r\n");
      out.write("  customButtons             : { //주말 숨기기 & 보이기 버튼\r\n");
      out.write("                                viewWeekends : {\r\n");
      out.write("                                  text  : '주말',\r\n");
      out.write("                                  click : function () {\r\n");
      out.write("                                    activeInactiveWeekends ? activeInactiveWeekends = false : activeInactiveWeekends = true;\r\n");
      out.write("                                    $('#calendar').fullCalendar('option', { \r\n");
      out.write("                                      weekends: activeInactiveWeekends\r\n");
      out.write("                                    });\r\n");
      out.write("                                  }\r\n");
      out.write("                                }\r\n");
      out.write("                               },\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("  eventRender: function (event, element, view) {\r\n");
      out.write("\r\n");
      out.write("    //일정에 hover시 요약\r\n");
      out.write("    element.popover({\r\n");
      out.write("      title: $('<div />', {\r\n");
      out.write("        class: 'popoverTitleCalendar',\r\n");
      out.write("        text: event.title\r\n");
      out.write("      }).css({\r\n");
      out.write("        'background': event.backgroundColor,\r\n");
      out.write("        'color': event.textColor\r\n");
      out.write("      }),\r\n");
      out.write("      content: $('<div />', {\r\n");
      out.write("          class: 'popoverInfoCalendar'\r\n");
      out.write("        }).append('<p><strong>등록자:</strong> ' + event.username + '</p>')\r\n");
      out.write("        .append('<p><strong>구분:</strong> ' + event.type + '</p>')\r\n");
      out.write("        .append('<p><strong>시간:</strong> ' + getDisplayEventDate(event) + '</p>')\r\n");
      out.write("        .append('<div class=\"popoverDescCalendar\"><strong>설명:</strong> ' + event.description + '</div>'),\r\n");
      out.write("      delay: {\r\n");
      out.write("        show: \"800\",\r\n");
      out.write("        hide: \"50\"\r\n");
      out.write("      },\r\n");
      out.write("      trigger: 'hover',\r\n");
      out.write("      placement: 'top',\r\n");
      out.write("      html: true,\r\n");
      out.write("      container: 'body'\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    return filtering(event);\r\n");
      out.write("\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  /* ****************\r\n");
      out.write("   *  일정 받아옴 \r\n");
      out.write("   * ************** */\r\n");
      out.write("  events: function (start, end, timezone, callback) {\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      type: \"get\",\r\n");
      out.write("      url: \"\",\r\n");
      out.write("      data: {\r\n");
      out.write("        // 화면이 바뀌면 Date 객체인 start, end 가 들어옴\r\n");
      out.write("        //startDate : moment(start).format('YYYY-MM-DD'),\r\n");
      out.write("        //endDate   : moment(end).format('YYYY-MM-DD')\r\n");
      out.write("      },\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("         \r\n");
      out.write("       var ress = [\r\n");
      out.write("          ");
      if (_jspx_meth_c_005fforEach_005f2(_jspx_page_context))
        return;
      out.write("\r\n");
      out.write("          \r\n");
      out.write("       ];\r\n");
      out.write("        var fixedDate = ress.map(function (array) {\r\n");
      out.write("          if (array.allDay && array.start !== array.end) {\r\n");
      out.write("            array.end = moment(array.end).add(1, 'days'); // 이틀 이상 AllDay 일정인 경우 달력에 표기시 하루를 더해야 정상출력\r\n");
      out.write("          }\r\n");
      out.write("          return array;\r\n");
      out.write("        });\r\n");
      out.write("        callback(fixedDate);\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  eventAfterAllRender: function (view) {\r\n");
      out.write("    if (view.name == \"month\") $(\".fc-content\").css('height', 'auto');\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  //일정 리사이즈\r\n");
      out.write("  eventResize: function (event, delta, revertFunc, jsEvent, ui, view) {\r\n");
      out.write("    $('.popover.fade.top').remove();\r\n");
      out.write("\r\n");
      out.write("    /** 리사이즈시 수정된 날짜반영\r\n");
      out.write("     * 하루를 빼야 정상적으로 반영됨. */\r\n");
      out.write("    var newDates = calDateWhenResize(event);\r\n");
      out.write("\r\n");
      out.write("    //리사이즈한 일정 업데이트\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      type: \"get\",\r\n");
      out.write("      url: \"\",\r\n");
      out.write("      data: {\r\n");
      out.write("        //id: event._id,\r\n");
      out.write("        //....\r\n");
      out.write("      },\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        alert('수정: ' + newDates.startDate + ' ~ ' + newDates.endDate);\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  eventDragStart: function (event, jsEvent, ui, view) {\r\n");
      out.write("    draggedEventIsAllDay = event.allDay;\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  //일정 드래그앤드롭\r\n");
      out.write("  eventDrop: function (event, delta, revertFunc, jsEvent, ui, view) {\r\n");
      out.write("    $('.popover.fade.top').remove();\r\n");
      out.write("\r\n");
      out.write("    //주,일 view일때 종일 <-> 시간 변경불가\r\n");
      out.write("    if (view.type === 'agendaWeek' || view.type === 'agendaDay') {\r\n");
      out.write("      if (draggedEventIsAllDay !== event.allDay) {\r\n");
      out.write("        alert('드래그앤드롭으로 종일<->시간 변경은 불가합니다.');\r\n");
      out.write("        location.reload();\r\n");
      out.write("        return false;\r\n");
      out.write("      }\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    // 드랍시 수정된 날짜반영\r\n");
      out.write("    var newDates = calDateWhenDragnDrop(event);\r\n");
      out.write("\r\n");
      out.write("    //드롭한 일정 업데이트\r\n");
      out.write("    $.ajax({\r\n");
      out.write("      type: \"get\",\r\n");
      out.write("      url: \"\",\r\n");
      out.write("      data: {\r\n");
      out.write("        //...\r\n");
      out.write("      },\r\n");
      out.write("      success: function (response) {\r\n");
      out.write("        alert('수정: ' + newDates.startDate + ' ~ ' + newDates.endDate);\r\n");
      out.write("      }\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  select: function (startDate, endDate, jsEvent, view) {\r\n");
      out.write("\r\n");
      out.write("    $(\".fc-body\").unbind('click');\r\n");
      out.write("    $(\".fc-body\").on('click', 'td', function (e) {\r\n");
      out.write("\r\n");
      out.write("      $(\"#contextMenu\")\r\n");
      out.write("        .addClass(\"contextOpened\")\r\n");
      out.write("        .css({\r\n");
      out.write("          display: \"block\",\r\n");
      out.write("          left: e.pageX,\r\n");
      out.write("          top: e.pageY\r\n");
      out.write("        });\r\n");
      out.write("      return false;\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    var today = moment();\r\n");
      out.write("\r\n");
      out.write("    if (view.name == \"month\") {\r\n");
      out.write("      startDate.set({\r\n");
      out.write("        hours: today.hours(),\r\n");
      out.write("        minute: today.minutes()\r\n");
      out.write("      });\r\n");
      out.write("      startDate = moment(startDate).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("      endDate = moment(endDate).subtract(1, 'days');\r\n");
      out.write("\r\n");
      out.write("      endDate.set({\r\n");
      out.write("        hours: today.hours() + 1,\r\n");
      out.write("        minute: today.minutes()\r\n");
      out.write("      });\r\n");
      out.write("      endDate = moment(endDate).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("    } else {\r\n");
      out.write("      startDate = moment(startDate).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("      endDate = moment(endDate).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("    }\r\n");
      out.write("\r\n");
      out.write("    //날짜 클릭시 카테고리 선택메뉴\r\n");
      out.write("    var $contextMenu = $(\"#contextMenu\");\r\n");
      out.write("    $contextMenu.on(\"click\", \"a\", function (e) {\r\n");
      out.write("      e.preventDefault();\r\n");
      out.write("\r\n");
      out.write("      //닫기 버튼이 아닐때\r\n");
      out.write("      if ($(this).data().role !== 'close') {\r\n");
      out.write("    \t  newEvent(startDate, endDate, $(this).html());\r\n");
      out.write("//          location.reload();\r\n");
      out.write("      }\r\n");
      out.write("\r\n");
      out.write("      $contextMenu.removeClass(\"contextOpened\");\r\n");
      out.write("      $contextMenu.hide();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    $('body').on('click', function () {\r\n");
      out.write("      $contextMenu.removeClass(\"contextOpened\");\r\n");
      out.write("      $contextMenu.hide();\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("  },\r\n");
      out.write("\r\n");
      out.write("  //이벤트 클릭시 수정이벤트\r\n");
      out.write("  eventClick: function (event, jsEvent, view) {\r\n");
      out.write("    editEvent(event);\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("function getDisplayEventDate(event) {\r\n");
      out.write("\r\n");
      out.write("  var displayEventDate;\r\n");
      out.write("\r\n");
      out.write("  if (event.allDay == false) {\r\n");
      out.write("    var startTimeEventInfo = moment(event.start).format('HH:mm');\r\n");
      out.write("    var endTimeEventInfo = moment(event.end).format('HH:mm');\r\n");
      out.write("    displayEventDate = startTimeEventInfo + \" - \" + endTimeEventInfo;\r\n");
      out.write("  } else {\r\n");
      out.write("    displayEventDate = \"하루종일\";\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  return displayEventDate;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function filtering(event) {\r\n");
      out.write("  var show_username = true;\r\n");
      out.write("  var show_type = true;\r\n");
      out.write("\r\n");
      out.write("//   var username = $('input:checkbox.filter:checked').map(function () {\r\n");
      out.write("//     return $(this).val();\r\n");
      out.write("//   }).get();\r\n");
      out.write("//   var types = $('#type_filter').val();\r\n");
      out.write("\r\n");
      out.write("//   show_username = username.indexOf(event.username) >= 0;\r\n");
      out.write("\r\n");
      out.write("//   if (types && types.length > 0) {\r\n");
      out.write("//     if (types[0] == \"all\") {\r\n");
      out.write("//       show_type = true;\r\n");
      out.write("//     } else {\r\n");
      out.write("//       show_type = types.indexOf(event.type) >= 0;\r\n");
      out.write("//     }\r\n");
      out.write("//   }\r\n");
      out.write("\r\n");
      out.write("  return show_username && show_type;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function calDateWhenResize(event) {\r\n");
      out.write("\r\n");
      out.write("  var newDates = {\r\n");
      out.write("    startDate: '',\r\n");
      out.write("    endDate: ''\r\n");
      out.write("  };\r\n");
      out.write("\r\n");
      out.write("  if (event.allDay) {\r\n");
      out.write("    newDates.startDate = moment(event.start._d).format('YYYY-MM-DD');\r\n");
      out.write("    newDates.endDate = moment(event.end._d).subtract(1, 'days').format('YYYY-MM-DD');\r\n");
      out.write("  } else {\r\n");
      out.write("    newDates.startDate = moment(event.start._d).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("    newDates.endDate = moment(event.end._d).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  return newDates;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function calDateWhenDragnDrop(event) {\r\n");
      out.write("  // 드랍시 수정된 날짜반영\r\n");
      out.write("  var newDates = {\r\n");
      out.write("    startDate: '',\r\n");
      out.write("    endDate: ''\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  // 날짜 & 시간이 모두 같은 경우\r\n");
      out.write("  if(!event.end) {\r\n");
      out.write("    event.end = event.start;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  //하루짜리 all day\r\n");
      out.write("  if (event.allDay && event.end === event.start) {\r\n");
      out.write("    console.log('1111')\r\n");
      out.write("    newDates.startDate = moment(event.start._d).format('YYYY-MM-DD');\r\n");
      out.write("    newDates.endDate = newDates.startDate;\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  //2일이상 all day\r\n");
      out.write("  else if (event.allDay && event.end !== null) {\r\n");
      out.write("    newDates.startDate = moment(event.start._d).format('YYYY-MM-DD');\r\n");
      out.write("    newDates.endDate = moment(event.end._d).subtract(1, 'days').format('YYYY-MM-DD');\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  //all day가 아님\r\n");
      out.write("  else if (!event.allDay) {\r\n");
      out.write("    newDates.startDate = moment(event.start._d).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("    newDates.endDate = moment(event.end._d).format('YYYY-MM-DD HH:mm');\r\n");
      out.write("  }\r\n");
      out.write("\r\n");
      out.write("  return newDates;\r\n");
      out.write("}\r\n");
      out.write("</script>");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/js/addEvent.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/js/editEvent.js\"></script>\r\n");
      out.write("    <script src=\"");
      out.print(request.getContextPath());
      out.write("/resources/fullcalendar/js/etcSetting.js\"></script>\r\n");
      out.write(" \r\n");
      out.write("</body>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }

  private boolean _jspx_meth_c_005fforEach_005f0(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f0 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f0_reused = false;
    try {
      _jspx_th_c_005fforEach_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f0.setParent(null);
      // /WEB-INF/views/schedule/calendar/calendar.jsp(33,16) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/schedule/calendar/calendar.jsp(33,16) '${scheduleCategoryList }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${scheduleCategoryList }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/schedule/calendar/calendar.jsp(33,16) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVar("scheduleCategory");
      // /WEB-INF/views/schedule/calendar/calendar.jsp(33,16) name = varStatus type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f0.setVarStatus("status");
      int[] _jspx_push_body_count_c_005fforEach_005f0 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f0 = _jspx_th_c_005fforEach_005f0.doStartTag();
        if (_jspx_eval_c_005fforEach_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            if (_jspx_meth_c_005fif_005f0(_jspx_th_c_005fforEach_005f0, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f0))
              return true;
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f0.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f0[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f0.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f0.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvarStatus_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f0);
      _jspx_th_c_005fforEach_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f0(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f0, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f0)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f0 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f0_reused = false;
    try {
      _jspx_th_c_005fif_005f0.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f0.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f0);
      // /WEB-INF/views/schedule/calendar/calendar.jsp(34,17) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f0.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scheduleCategory.schedule_category_no eq 'SCHEDULE_CATEGORY0005' ||scheduleCategory.schedule_category_no eq 'SCHEDULE_CATEGORY0006' }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f0 = _jspx_th_c_005fif_005f0.doStartTag();
      if (_jspx_eval_c_005fif_005f0 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("<li><a tabindex=\"-1\" href=\"#\"  data-role=\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scheduleCategory.schedule_category_no }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write('"');
          out.write(' ');
          out.write('>');
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scheduleCategory.schedule_category_name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("</a></li>\r\n");
          out.write("                \t");
          int evalDoAfterBody = _jspx_th_c_005fif_005f0.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f0);
      _jspx_th_c_005fif_005f0_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f0, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f0_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f1(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f1 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f1_reused = false;
    try {
      _jspx_th_c_005fforEach_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f1.setParent(null);
      // /WEB-INF/views/schedule/calendar/calendar.jsp(87,36) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/schedule/calendar/calendar.jsp(87,36) '${scheduleCategoryList }'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${scheduleCategoryList }",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/schedule/calendar/calendar.jsp(87,36) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f1.setVar("scheduleCategory");
      int[] _jspx_push_body_count_c_005fforEach_005f1 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f1 = _jspx_th_c_005fforEach_005f1.doStartTag();
        if (_jspx_eval_c_005fforEach_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            out.write("<option value=\"");
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${ scheduleCategory.schedule_category_no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write('"');
            out.write('>');
            out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${scheduleCategory.schedule_category_name }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
            out.write("</option>\r\n");
            out.write("                                    ");
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f1.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f1[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f1.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f1.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f1);
      _jspx_th_c_005fforEach_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f1_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fforEach_005f2(javax.servlet.jsp.PageContext _jspx_page_context)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:forEach
    org.apache.taglibs.standard.tag.rt.core.ForEachTag _jspx_th_c_005fforEach_005f2 = (org.apache.taglibs.standard.tag.rt.core.ForEachTag) _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.get(org.apache.taglibs.standard.tag.rt.core.ForEachTag.class);
    boolean _jspx_th_c_005fforEach_005f2_reused = false;
    try {
      _jspx_th_c_005fforEach_005f2.setPageContext(_jspx_page_context);
      _jspx_th_c_005fforEach_005f2.setParent(null);
      // /WEB-INF/views/schedule/calendar/calendar_js.jsp(130,10) name = items type = javax.el.ValueExpression reqTime = true required = false fragment = false deferredValue = true expectedTypeName = java.lang.Object deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setItems(new org.apache.jasper.el.JspValueExpression("/WEB-INF/views/schedule/calendar/calendar_js.jsp(130,10) '${scheduleList}'",_jsp_getExpressionFactory().createValueExpression(_jspx_page_context.getELContext(),"${scheduleList}",java.lang.Object.class)).getValue(_jspx_page_context.getELContext()));
      // /WEB-INF/views/schedule/calendar/calendar_js.jsp(130,10) name = var type = java.lang.String reqTime = false required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fforEach_005f2.setVar("schedule");
      int[] _jspx_push_body_count_c_005fforEach_005f2 = new int[] { 0 };
      try {
        int _jspx_eval_c_005fforEach_005f2 = _jspx_th_c_005fforEach_005f2.doStartTag();
        if (_jspx_eval_c_005fforEach_005f2 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
          do {
            if (_jspx_meth_c_005fif_005f1(_jspx_th_c_005fforEach_005f2, _jspx_page_context, _jspx_push_body_count_c_005fforEach_005f2))
              return true;
            int evalDoAfterBody = _jspx_th_c_005fforEach_005f2.doAfterBody();
            if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
              break;
          } while (true);
        }
        if (_jspx_th_c_005fforEach_005f2.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
          return true;
        }
      } catch (java.lang.Throwable _jspx_exception) {
        while (_jspx_push_body_count_c_005fforEach_005f2[0]-- > 0)
          out = _jspx_page_context.popBody();
        _jspx_th_c_005fforEach_005f2.doCatch(_jspx_exception);
      } finally {
        _jspx_th_c_005fforEach_005f2.doFinally();
      }
      _005fjspx_005ftagPool_005fc_005fforEach_0026_005fvar_005fitems.reuse(_jspx_th_c_005fforEach_005f2);
      _jspx_th_c_005fforEach_005f2_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fforEach_005f2, _jsp_getInstanceManager(), _jspx_th_c_005fforEach_005f2_reused);
    }
    return false;
  }

  private boolean _jspx_meth_c_005fif_005f1(javax.servlet.jsp.tagext.JspTag _jspx_th_c_005fforEach_005f2, javax.servlet.jsp.PageContext _jspx_page_context, int[] _jspx_push_body_count_c_005fforEach_005f2)
          throws java.lang.Throwable {
    javax.servlet.jsp.PageContext pageContext = _jspx_page_context;
    javax.servlet.jsp.JspWriter out = _jspx_page_context.getOut();
    //  c:if
    org.apache.taglibs.standard.tag.rt.core.IfTag _jspx_th_c_005fif_005f1 = (org.apache.taglibs.standard.tag.rt.core.IfTag) _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.get(org.apache.taglibs.standard.tag.rt.core.IfTag.class);
    boolean _jspx_th_c_005fif_005f1_reused = false;
    try {
      _jspx_th_c_005fif_005f1.setPageContext(_jspx_page_context);
      _jspx_th_c_005fif_005f1.setParent((javax.servlet.jsp.tagext.Tag) _jspx_th_c_005fforEach_005f2);
      // /WEB-INF/views/schedule/calendar/calendar_js.jsp(131,13) name = test type = boolean reqTime = true required = true fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
      _jspx_th_c_005fif_005f1.setTest(((java.lang.Boolean) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_status eq '0' }", boolean.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null)).booleanValue());
      int _jspx_eval_c_005fif_005f1 = _jspx_th_c_005fif_005f1.doStartTag();
      if (_jspx_eval_c_005fif_005f1 != javax.servlet.jsp.tagext.Tag.SKIP_BODY) {
        do {
          out.write("\r\n");
          out.write("           {\r\n");
          out.write("                 \"_id\" : '");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("',\r\n");
          out.write("                 \"title\":'");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("',\r\n");
          out.write("                 \"description\":\"");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_content}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("\",\r\n");
          out.write("                 \"start\": '");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_start_date}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("',\r\n");
          out.write("                 \"end\":  '");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_end_date}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("',\r\n");
          out.write("                 \"type\":  '");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_category_no}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("',\r\n");
          out.write("                 \"username\": '");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.member_id}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("', \r\n");
          out.write("                 \"backgroundColor\":'");
          out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${schedule.schedule_color}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
          out.write("',\r\n");
          out.write("                 \"textColor\": \"#000000\"\r\n");
          out.write("              },\r\n");
          out.write("              ");
          int evalDoAfterBody = _jspx_th_c_005fif_005f1.doAfterBody();
          if (evalDoAfterBody != javax.servlet.jsp.tagext.BodyTag.EVAL_BODY_AGAIN)
            break;
        } while (true);
      }
      if (_jspx_th_c_005fif_005f1.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
        return true;
      }
      _005fjspx_005ftagPool_005fc_005fif_0026_005ftest.reuse(_jspx_th_c_005fif_005f1);
      _jspx_th_c_005fif_005f1_reused = true;
    } finally {
      org.apache.jasper.runtime.JspRuntimeLibrary.releaseTag(_jspx_th_c_005fif_005f1, _jsp_getInstanceManager(), _jspx_th_c_005fif_005f1_reused);
    }
    return false;
  }
}
