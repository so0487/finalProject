<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="Member-Mapper">

	<sql id="search">
		<if test="searchType == 'n'.toString()">
			and member_name like '%'||#{keyword}||'%'			
		</if>
<!-- 		<if test="searchType == 'b'.toString()"> -->
<!-- 			and member_role like '%'||#{keyword}||'%'			 -->
<!-- 		</if> -->
		<if test="searchType == 'i'.toString()">
			and member_id like '%'||#{keyword}||'%'			
		</if>
		<if test="searchType == 'm'.toString()">
			and member_email like '%'||#{keyword}||'%'			
		</if>
		<if test="searchType == 'ni'.toString()">
			and (
			member_name like '%'||#{keyword}||'%'
			or
			member_id like '%'||#{keyword}||'%'						
			)			
		</if>
		<if test="searchType == 'nim'.toString()">
			and (
			member_name like '%'||#{keyword}||'%'
			or
			member_id like '%'||#{keyword}||'%'
			or
			member_email like '%'||#{keyword}||'%'						
			)			
		</if>
	</sql>
	
	<select id="selectSearchMemberList" resultType="member">
		select
		*
		from
		member
		where member_id is not null  			  	
		<include refid="search" />
		order by member_id desc
	</select>
	
	<select id="selectSearchRoleMemberList" resultType="member">
		select
		*
		from
		member
		where member_id is not null
		and member_role=#{sort}  			  	
		<include refid="search" />
		order by member_id desc
	</select>
	
	<select id="selectSearchMemberListCount" resultType="int">
		select
		count(*)
		from
		member
		where member_id is not null  			  	
		<include refid="search" />
		order by member_id desc
	</select>

	
	<select id="selectMemberById" parameterType="str" resultType="member">
		select
		*
		from member
		where member_id=#{member_id}
	</select>
	
	<select id="selectMemberByRole" parameterType="str" resultType="member">
		select
		*
		from member
		where member_role=#{member_role}
	</select>
	
	<select id="selectMemberByEmail" parameterType="str" resultType="member">
		select
		*
		from member
		where member_email=#{member_email}
	</select>
	
	
	<select id="selectProAdminByTime" resultType="member">
		select *
		from member 
		where member_id not in (select member_id 
	                           from schedule 
	                           where schedule_start_date in (select schedule_start_date 
	                                                         from schedule 
	                                                         where schedule_start_date between #{start_date} and #{end_date}))
		and member_role='PROFESSOR'
	</select>
	
	<select id ="selectMemberListCount" resultType="int">
		select count(*)
		from member		
	</select>
	
	<update id="insertMember" parameterType="member">
      insert into 
      member(member_id, member_pwd, member_email, member_phone,member_picture,member_name,member_address)
      values(#{member_id},#{member_pwd},#{member_email},#{member_phone},#{member_picture},#{member_name},#{member_address})
    </update>
   
    <update id="insertAdminMember" parameterType="member">
      insert into 
	  member(member_id, member_pwd, member_email, member_phone,member_picture,member_name,member_address,member_status,member_role)
      values(#{member_id},#{member_pwd},#{member_email},#{member_phone},#{member_picture},#{member_name},#{member_address},#{member_status},#{member_role})
    </update>
  	
	<update id="updateMember" parameterType="member">
		update member
		set
		member_email=#{member_email},member_phone=#{member_phone},member_name=#{member_name},member_picture=#{member_picture},member_address=#{member_address},member_pwd=#{member_pwd}

		where member_id=#{member_id}
	</update>
	
	<update id="updateAdminMember" parameterType="member">
		update member
		set
		member_email=#{member_email},member_phone=#{member_phone},member_name=#{member_name},member_picture=#{member_picture},member_address=#{member_address},member_pwd=#{member_pwd},
		member_status=#{member_status},member_role=#{member_role}

<!-- 		<if test="member_role!= null"> -->
<!-- 			member_role=#{member_role} -->
<!-- 		</if> -->
		where member_id=#{member_id}
	</update>
	
	
	
	<update id="deleteMember" parameterType="str">
		delete
		from member
		where member_id=#{member_id}		
	</update>
	
	<update id="disabledMember">
		update member
		set member_status='1'
		where member_id=#{member_id}
	</update>
	
	<update id="enabledMember">
		update member
		set member_status='0'
		where member_id=#{member_id}
	</update>

	
	<update id="createAuthKey">
		update Member set member_status = '3' where member_email = #{member_email}
	</update>
	
	<update id="successAuthKey">
		update Member set member_status = '0' where member_email = #{member_email}
	</update>
	
	<select id="selectMemberFindId" parameterType="member" resultType="member">
		select
		*
		from member
		where member_email=#{member_email}
		and   member_name=#{member_name}				
	</select>
	
	<select id="selectMemberFindPwd" parameterType="member" resultType="member">
		select
		*
		from member
		where member_email=#{member_email}
		and   member_id=#{member_id}				
	</select>
	
	<update id="updateMemberResetPwd" parameterType="member">
		update Member set member_pwd = #{member_pwd} where member_id = #{member_id}
	</update>

	<select id="selectMemberAdmin" resultType="map">
	    select 
	       member_id,
	        member_name 
	    from
	       member
	    where 
	       member_role = 'ADMIN'
	 </select>  
	
</mapper>

