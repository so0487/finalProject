package kr.or.ddit.zoom.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.github.scribejava.core.model.OAuth2AccessToken;

import kr.or.ddit.dto.MeetingVO;
import kr.or.ddit.request.ZoomApiIntegration;
import kr.or.ddit.request.ZoomDetails;
import kr.or.ddit.zoom.service.MeetingService;

@Controller
public class CreateMeetingController {
		
		String topic;
		String start_time;
		String duration;
		String password;
		String type;
		MeetingVO dto = new MeetingVO();
		
		
		private ZoomApiIntegration ZoomApiIntegration;
		private String apiResult = null;
	
		@Autowired
	    private void setZoomApiIntegration(ZoomApiIntegration ZoomApiIntegration) {
	        this.ZoomApiIntegration = ZoomApiIntegration;
	    }
		
//		@Resource(name="MeetingDaoSerivce")
		@Autowired
		private MeetingService meetingService;
		
		public void setMeetingService(MeetingService meetingService) {
			this.meetingService = meetingService;
		}


		@RequestMapping("/create/meetings")
		public String createMeet(){
			return "/zoom/ZoomCreate.page";
		}
		
		
		
		//form
		@RequestMapping(value ="/create/redirect", method = { RequestMethod.GET, RequestMethod.POST })
			public void createRedirct(Model model, HttpSession session, HttpServletRequest request,HttpServletResponse response){
			  
			  System.out.println("----------------create meetings api 요청------------------");
			  System.out.println("---------Zoom 회의 개설 -----------");
			  
		    	topic = request.getParameter("topic");
		    	start_time= request.getParameter("start_time");
		    	duration = request.getParameter("duration");
		    	password = request.getParameter("password");
		    	type = request.getParameter("type");
//		      dto = new MeetingVO(null, topic, start_time, duration, password, null, null, null,null,type,,"I");
		      System.out.println("---------dto-----------"+dto.getMeeting_no());
			  //회의 추가 상태로 변환
			  ZoomDetails.setZOOM_STATE("zoom_create");
			  String zoomAuthUrl = ZoomApiIntegration.getAuthorizationUrl(session);
		      System.out.println("-------ZoomAuthUrl: " + zoomAuthUrl);
		      model.addAttribute("url_create", zoomAuthUrl);
		      try {
		        	response.sendRedirect(zoomAuthUrl);
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
	
		
		//redirect url
	  @RequestMapping(value = "/create/meetings/redirect", method = { RequestMethod.GET, RequestMethod.POST })
	  public String CreateMeeting(Model model, @RequestParam String code, @RequestParam String state, HttpSession session, HttpServletRequest request)
	            throws IOException {
	        try {
	        	 System.out.println("---------회의 개설성공 -----------");
	 	        OAuth2AccessToken oauthToken;
	 	        System.out.println(session+"세션임");
	 	        oauthToken = ZoomApiIntegration.getAccessToken(session, code, state);
	 	        apiResult = ZoomApiIntegration.setMeeting(oauthToken,dto);
	 	        System.out.println("apiResult-----" + apiResult);
	 	        
	        	JSONParser jsonParse = new JSONParser();
	            JSONObject obj =  (JSONObject)jsonParse.parse(apiResult);
	            System.out.println("JsonObject 결과 값 :: " + obj);
	            //Json Array값만 빼기
	            //Json 배열 Json Object로 변환
	            
	            /* 데이터 베이스에 저장 */
	            String start_time = obj.get("start_time").toString();
	            String join_url = obj.get("join_url").toString();
	            String meetingid = "null";
	            String uuid = obj.get("uuid").toString();
	            String joinId = obj.get("id").toString();
	            String joinPw = obj.get("password").toString();
	            String duration = obj.get("duration").toString();
	            String host_Id = obj.get("host_id").toString();
	            String start_url = obj.get("start_url").toString();
	            String type = obj.get("type").toString();
	            
	           
	            Authentication authentication = SecurityContextHolder.getContext().getAuthentication(); 
	            System.out.println("1." + authentication);
	            System.out.println("2." + authentication.getPrincipal());
	            
	            User user = (User) authentication.getPrincipal();
	            String userid = user.getUsername();

	            System.out.println("회의 개설 유저 아이디: " +userid);
	            
	            Map<String, String> paramMap = new HashMap<String, String>();
	    		paramMap.put("topic", topic);
	    		paramMap.put("start_time", start_time);
	    		paramMap.put("join_url", join_url);
	    		paramMap.put("meetingid", meetingid);
	    		paramMap.put("uuid", uuid);
	    		paramMap.put("joinId", joinId);
	    		paramMap.put("joinPw", joinPw);
	    		paramMap.put("duration", duration);
	    		paramMap.put("host_Id", host_Id);
	    		paramMap.put("start_url", start_url);
	    		paramMap.put("userid", userid);
	    		paramMap.put("type", type);
	    		meetingService.registMeeting(paramMap);
	    		
	    		System.out.println("param=================="+paramMap);
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
	        
	        

	        
	        return "redirect:/zoom";
	    }
	  
	  
}
