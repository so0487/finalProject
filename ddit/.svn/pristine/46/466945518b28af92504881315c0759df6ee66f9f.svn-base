package kr.or.ddit.boardReply.controller;

import java.sql.SQLException;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import kr.or.ddit.boardReply.service.ReplyService;
import kr.or.ddit.dto.ReplyVO;
import kr.or.ddit.request.PageMaker;
import kr.or.ddit.request.RemoveReplyRequest;
import kr.or.ddit.request.SearchCriteria;


@RestController
@RequestMapping("/replies")
public class BoardReplyController {

	@Autowired
	private ReplyService replyService;

	public void setReplyService(ReplyService replyService) {
		this.replyService = replyService;
	}

	@RequestMapping(value = "/board/qna/{post_no}/{page}", method = RequestMethod.GET)
	public ResponseEntity<Map<String, Object>> replyList(@PathVariable("post_no") String post_no,
			@PathVariable("page") int page) throws Exception {
		ResponseEntity<Map<String, Object>> entity = null;

		SearchCriteria cri = new SearchCriteria();
		cri.setPage(page);

		try {

			Map<String, Object> dataMap = replyService.getReplyList(post_no, cri);
			entity = new ResponseEntity<Map<String, Object>>(dataMap, HttpStatus.OK);

		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<Map<String, Object>>(HttpStatus.INTERNAL_SERVER_ERROR);

		}
		return entity;
	}

	@RequestMapping(value = "", method = RequestMethod.POST)
	public ResponseEntity<String> register(@RequestBody ReplyVO reply) throws Exception {
		ResponseEntity<String> entity = null;

		try {
			replyService.registReply(reply);

			SearchCriteria cri = new SearchCriteria();

			Map<String, Object> dataMap = replyService.getReplyList(reply.getPost_no(), cri);
			PageMaker pageMaker = (PageMaker) dataMap.get("pageMaker");
			int realEndPage = pageMaker.getRealEndPage();

			entity = new ResponseEntity<String>("SUCCESS," + realEndPage, HttpStatus.OK);
		} catch (Exception e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(e.getMessage(), HttpStatus.INTERNAL_SERVER_ERROR);
		}
		return entity;
	}
	
	@RequestMapping(value="/{reply_no}", method= {RequestMethod.PUT, RequestMethod.PATCH})
	public ResponseEntity<String>modify(@PathVariable("reply_no")String reply_no, @RequestBody ReplyVO reply) throws Exception{
		ResponseEntity<String> entity = null;
		
		reply.setReply_no(reply_no);
		
		try {
			replyService.modifyReply(reply);
			entity = new ResponseEntity<String>("SUCCESS", HttpStatus.OK);
						
		} catch (SQLException e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}
		
		
		return entity;
		
	}
	
	
	@RequestMapping(value="/{reply_no}", method=RequestMethod.DELETE)
	public ResponseEntity<String>remove(@PathVariable("reply_no")String reply_no, @RequestBody RemoveReplyRequest deleteReq) throws Exception{
		ResponseEntity<String> entity = null;
		try {
			replyService.deleteReply(reply_no);
			SearchCriteria cri = new SearchCriteria();
			
			Map<String, Object>dataMap = replyService.getReplyList(deleteReq.getPost_no(), cri);
			PageMaker pageMaker = (PageMaker) dataMap.get("pageMaker");
			int page = deleteReq.getPage();
			int realEndPage = pageMaker.getRealEndPage();
			if (page > realEndPage) {
				page = realEndPage;
			}

			entity = new ResponseEntity<String>(""+page, HttpStatus.OK);
		} catch (SQLException e) {
			e.printStackTrace();
			entity = new ResponseEntity<String>(HttpStatus.INTERNAL_SERVER_ERROR);
		}

		return entity;
	}
}
