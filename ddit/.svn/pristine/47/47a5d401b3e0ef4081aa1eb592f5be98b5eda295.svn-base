package kr.or.ddit.interview.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.time.Instant;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import com.github.scribejava.core.model.OAuth2AccessToken;

import kr.or.ddit.classes.service.ClassService;
import kr.or.ddit.dto.ClassVO;
import kr.or.ddit.dto.InterviewVO;
import kr.or.ddit.dto.MeetingVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.ProfessorVO;
import kr.or.ddit.interview.service.InterviewService;
import kr.or.ddit.member.service.ProfessorService;
import kr.or.ddit.request.InterviewRegistRequest;
import kr.or.ddit.request.SearchCriteria;
import kr.or.ddit.request.ZoomApiIntegration;
import kr.or.ddit.request.ZoomDetails;
import kr.or.ddit.zoom.service.MeetingService;

@Controller
@RequestMapping("/interview")
public class InterviewController {

	@Autowired
	private InterviewService interviewService;

	public void setInterviewService(InterviewService interviewService) {
		this.interviewService = interviewService;
	}

	@Autowired
	private ProfessorService professorService;

	public void setProfessorService(ProfessorService professorService) {
		this.professorService = professorService;
	}

	@Autowired
	private ClassService classService;

	public void setClassService(ClassService classService) {
		this.classService = classService;
	}

	private MeetingService meetingService;

	public void setMeetingService(MeetingService meetingService) {
		this.meetingService = meetingService;
	}

	@RequestMapping("/main")
	public String main() throws Exception {
		return "interview/main.open";
	}

	@RequestMapping("/registForm")
	public ModelAndView registForm(String error, HttpServletResponse response, String class_no) {
		String url = "interview/registForm.page";

		List<ClassVO> classList = null;
		List<ProfessorVO> proList = null;
		ClassVO classes = null;
		System.out.println(class_no + "sssssssssss");
		try {
			classes = classService.getClassByNo(class_no);
			classList = (List<ClassVO>) classService.getSearchClassList(new SearchCriteria()).get("classList");
			proList = professorService.getProfessorList(new SearchCriteria());
		} catch (SQLException e) {
			e.printStackTrace();
		}

		System.out.println(classes.getCurriculum_name() + "ssssssss");
		ModelAndView mnv = new ModelAndView();
		mnv.addObject("classes", classes);
		mnv.addObject("classList", classList);
		mnv.addObject("proList", proList);
		mnv.setViewName(url);

		return mnv;
	}

	@RequestMapping(value = "/regist", method = RequestMethod.POST)
	public void regist(InterviewRegistRequest interviewReq, HttpServletResponse response, HttpSession session,
			HttpServletRequest request, ModelAndView mnv) throws IOException {

		int mp = (int) ((int) (interviewReq.getInterview_max_personnel()) * 1.5);// 교육과정 회차의 총 모집인원
		int p = interviewReq.getInterview_personnel(); // 한 인터뷰당 총 인원

		int cnt = mp / p;

		ClassVO classes = null;
		try {
			classes = classService.getClassByNo(interviewReq.getClass_no());
		} catch (SQLException e1) {
			e1.printStackTrace();
		}

		Date start;
		OffsetDateTime odt = OffsetDateTime.parse(interviewReq.getInterview_start_date() + ":00Z");
		Instant instant = odt.toInstant();
		Date startdate = Date.from(instant);

		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();

		// 면접별인원/회차모집 총 인원
		List<InterviewVO> interviewList = new ArrayList<>();
		for (int i = 0; i < cnt; i++) {
			InterviewVO interview = new InterviewVO();

			interview.setInterview_name(classes.getCurriculum_name() + classes.getClass_number() + "기 " + i + "회차 면접");
			interview.setClass_no(interviewReq.getClass_no());
			interview.setInterview_start_date(
					new Date(startdate.getTime() + (long) (1000 * 60 * interviewReq.getInterview_time() * (i + 6))));
			interview.setInterview_end_date(
					new Date(startdate.getTime() + (long) (1000 * 60 * interviewReq.getInterview_time() * (i + 7))));
			interview.setInterview_max_personnel(p);
			
			interviewList.add(interview);
			
			try {
				interviewService.registInterview(interview, valueArr);
				
//				out.println("<script>");
//				out.println("alert('면접 등록 성공')");
//				out.println("location.href = "+request.getContextPath()+"/create/meetings.do");
//				out.println("</script>");
			} catch (SQLException e) {
//				out.println("<script>");
//				out.println("alert('면접 등록 실패')");
//				out.println("location.href = document.referrer;");
//				out.println("</script>");
			}
			
		}
		createRedirct(mnv, interviewList.get(0), session, request, response);
	}

	List<String> valueArr;

	@RequestMapping(value = "/regist/proList", method = RequestMethod.POST)
	public void proList(@RequestParam(value = "valueArrTest[]") List<String> valueArr, HttpServletResponse response) {
		System.out.println(valueArr);
		this.valueArr = valueArr;
	}

	@RequestMapping("/list")
	public ModelAndView list(SearchCriteria cri, ModelAndView mnv, String class_no) {
		// 로그인유저 권한 : 관리자 -> list2
		// 로그인유저 권한 : 수강생 -> list
		String url = "interview/list2.page";

		List<InterviewVO> interviewList = null;
		ClassVO classes = null;
		try {
			interviewList = interviewService.getInterviewList(class_no);
			classes = classService.getClassByNo(interviewList.get(0).getClass_no());
		} catch (SQLException e) {
			e.printStackTrace();
		}
		mnv.setViewName(url);
		mnv.addObject("class_no", class_no);
		mnv.addObject("interviewList", interviewList);
		mnv.addObject("classes", classes);
		return mnv;
	}

	@RequestMapping("/detail")
	public ModelAndView detail(String interview_no, SearchCriteria cri, ModelAndView mnv) {
		String url = "interview/detail.page";
		InterviewVO interview = null;
		ClassVO classes = null;
		try {
			interview = interviewService.getInterviewByNo(interview_no);
			classes = classService.getClassByNo(interview.getClass_no());
		} catch (SQLException e) {
			e.printStackTrace();
		}
		mnv.addObject("interview", interview);
		mnv.addObject("classes", classes);
		mnv.setViewName(url);
		return mnv;
	}

	@RequestMapping("/modifyForm")
	public ModelAndView modifyForm(String interview_no, SearchCriteria cri, ModelAndView mnv) {
		String url = "interview/modifyForm.page";
		mnv.setViewName(url);
		return mnv;
	}

	@RequestMapping("/modify")
	public void modify(String interview_no, @ModelAttribute("cri") SearchCriteria cri, HttpServletResponse response) {

	}

	@RequestMapping("/remove")
	public void remove(String interview_no, @ModelAttribute("cri") SearchCriteria cri, HttpServletResponse response) {

	}

	// 면접 줌 미팅
	@Autowired
	private ZoomApiIntegration ZoomApiIntegration;
	
	public void setZoomApiIntegration(ZoomApiIntegration ZoomApiIntegration) {
		this.ZoomApiIntegration = ZoomApiIntegration;
	}

	private String apiResult = null;
	private MeetingVO meetingvo;
	
	@RequestMapping("/create/meetings")
	public void createRedirct(ModelAndView mnv, InterviewVO interview, HttpSession session, HttpServletRequest request,
			HttpServletResponse response) throws IOException {

		System.out.println("----------------create meetings api 요청------------------");
		System.out.println("---------Zoom 회의 개설 -----------");

		String topic = interview.getInterview_name();
		String start_time = new SimpleDateFormat("yyyy-MM-dd").format(interview.getInterview_start_date()); // 데이트 ->
																											// string
		String duration = Long.toString(
				(interview.getInterview_end_date().getTime() - interview.getInterview_start_date().getTime()) / 60);
//		String password = request.getParameter("password");
		String password = "123";
//		String type = request.getParameter("type");
		meetingvo = new MeetingVO(null, topic, start_time, duration, password, null, null, null, null, "2");
		System.out.println("---------dto-----------" + meetingvo.getMeetingid());
		// 회의 추가 상태로 변환
		ZoomDetails.setZOOM_STATE("zoom_create");
		System.out.println(session+"세션");
		String zoomAuthUrl = ZoomApiIntegration.getAuthorizationUrl(session);
		System.out.println("-------ZoomAuthUrl: " + zoomAuthUrl);
		
		mnv.addObject("interview",interview);
		mnv.addObject("url_create", zoomAuthUrl);
		mnv.setViewName("zoom/successCreate");
		
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		out.println("<script>");
		out.println("location.href = '"+zoomAuthUrl+"'");
		out.println("</script>");
		
		
//		return mnv;
	}
	
	
	
	@RequestMapping(value = "/create/meetings/redirect", method = { RequestMethod.GET, RequestMethod.POST })
	public String CreateMeeting(Model model, @RequestParam String code, @RequestParam String state, HttpSession session,
			HttpServletRequest request) throws IOException {
		try {
			System.out.println("---------회의 개설성공 -----------");
			OAuth2AccessToken oauthToken;
			System.out.println(session + "세션임");
			oauthToken = ZoomApiIntegration.getAccessToken(session, code, state);
			apiResult = ZoomApiIntegration.setMeeting(oauthToken, meetingvo);
			System.out.println("apiResult-----" + apiResult);

			JSONParser jsonParse = new JSONParser();
			JSONObject obj = (JSONObject) jsonParse.parse(apiResult);
			System.out.println("JsonObject 결과 값 :: " + obj);
			// Json Array값만 빼기
			// Json 배열 Json Object로 변환
	
			/* 데이터 베이스에 저장 */
			
			String topic=obj.get("topic").toString();
			String start_time = obj.get("start_time").toString();
			String join_url = obj.get("join_url").toString();
			String meetingid = "null";
			String uuid = obj.get("uuid").toString();
			String joinId = obj.get("id").toString();
			String joinPw = obj.get("password").toString();
			String duration = obj.get("duration").toString();
			String host_Id = obj.get("host_id").toString();
			String start_url = obj.get("start_url").toString();
			String type = obj.get("type").toString();

			Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
			System.out.println("1." + authentication);
			System.out.println("2." + authentication.getPrincipal());

//			User user = (User) authentication.getPrincipal();
//			String userid = user.getUsername();
			String userid = ((MemberVO) (session.getAttribute("loginUser"))).getMember_id();
			
			System.out.println("회의 개설 유저 아이디: " + userid);

			Map<String, String> paramMap = new HashMap<String, String>();
			paramMap.put("topic", topic);
			paramMap.put("start_time", start_time);
			paramMap.put("join_url", join_url);
			paramMap.put("meetingid", meetingid);
			paramMap.put("uuid", uuid);
			paramMap.put("joinId", joinId);
			paramMap.put("joinPw", joinPw);
			paramMap.put("duration", duration);
			paramMap.put("host_Id", host_Id);
			paramMap.put("start_url", start_url);
			paramMap.put("userid", userid);
			paramMap.put("type", type);

			meetingService.registMeeting(paramMap);

			System.out.println("param==================" + paramMap);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}

		return "redirect:/zoom";
	}
	

}
