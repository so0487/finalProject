package kr.or.ddit.message.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.dto.AttachToMessageVO;
import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.dto.MessageVO;
import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.message.dao.AttachToMessageDAO;
import kr.or.ddit.message.service.MessageService;
import kr.or.ddit.request.RegistMessageRequest;
import kr.or.ddit.request.SearchCriteria;

@Controller
@RequestMapping("/message")
public class MessageController {

	@Autowired
	private MessageService service;
	public void setService(MessageService service) {
		this.service = service;
	}

	@Autowired
	private MemberService memberService;

	@Autowired
	private AttachToMessageDAO attachToMessageDAO;
	public void setAttachToMessageDAO(AttachToMessageDAO attachToMessageDAO) {
		this.attachToMessageDAO = attachToMessageDAO;
	}
	
	@Resource(name = "messagefileUploadPath")
	private String messagefileUploadPath;
	
	@RequestMapping("/list")
	public ModelAndView list(SearchCriteria cri, ModelAndView mnv, String member_id, HttpServletRequest request)
			throws SQLException {

		MemberVO member = (MemberVO) request.getSession().getAttribute("loginUser");
		String message_receiver = member.getMember_id();

		String url = "message/receiveMessageList.page";

		List<MemberVO> memberList = memberService.getMemberList(cri);

		Map<String, Object> dataMap = service.receiveMailBox(cri, message_receiver);
		dataMap.put("memberList", memberList);
		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);

		return mnv;
	}

	@RequestMapping("/detail")
	public ModelAndView detail(String message_no, @ModelAttribute("cri") SearchCriteria cri, ModelAndView mnv)
			throws Exception {
		String url = "message/messageDetail.page";
		
		MessageVO message = service.messageByMessageNo(message_no);
//		System.out.println("message : "+message);
		
		//파일명 재정의
		List<AttachToMessageVO>attachList = message.getAttachList();
//		System.out.println("attachList : "+attachList);
		if(attachList!=null) {
			for(AttachToMessageVO attach : attachList) {
				String fileName = attach.getFile_name().split("\\$\\$")[1];	
				attach.setFile_name(fileName);
			}
		}
		mnv.addObject("message", message);
		mnv.setViewName(url);
		
		return mnv;
	}

	@RequestMapping("/sendMessageBox")
	public ModelAndView sendMessageBox(String member_id, SearchCriteria cri, ModelAndView mnv,
			HttpServletRequest request) throws SQLException {
		MemberVO member = (MemberVO) request.getSession().getAttribute("loginUser");

		String message_sender = member.getMember_id();

		String url = "message/sendMessageList.page";

		Map<String, Object> dataMap = service.sendMailBox(cri, message_sender);

		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);

		return mnv;
	}
	
	@RequestMapping(value = "regist", method = RequestMethod.POST, produces = "text/plain;char=utf-8")

	public void regist(RegistMessageRequest registReq, HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		List<AttachToMessageVO> attachList = saveFile(registReq);
		MessageVO message = registReq.toMessageVO();
		message.setAttachList(attachList);
		//System.out.println("sdaadsadasdasdasdasdasdasdasdasdsadas"+attachList);
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();

		try {
			service.writeMessage(message);

			out.println("<script>");
			out.println("alert('전송되었습니다.');");
			out.println("location.href='" + request.getContextPath() + "/message/sendMessageBox';");
			out.println("</script>");
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("메시지 전송에 실패하였습니다.");
		}
	}
	
	
	private List<AttachToMessageVO> saveFile(RegistMessageRequest registReq) throws Exception {
		String messagefileUploadPath = this.messagefileUploadPath;

		List<AttachToMessageVO> attachList = new ArrayList<AttachToMessageVO>();

		if (registReq.getUploadFile() != null) {
			for (MultipartFile multi : registReq.getUploadFile()) {
				String fileName = UUID.randomUUID().toString().replace("-", "") + "$$" + multi.getOriginalFilename();
				File target = new File(messagefileUploadPath, fileName);

				if (!target.exists()) {
					target.mkdirs();
				}
				multi.transferTo(target);

				AttachToMessageVO attach = new AttachToMessageVO();

				attach.setUpload_path(messagefileUploadPath);
				attach.setFile_name(fileName);
				attach.setFile_type(fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase());

				attachList.add(attach);
			}

		}
		return attachList;
	}

	@RequestMapping("/notReadMessage")
	public ModelAndView notReadMessage(SearchCriteria cri, ModelAndView mnv, String member_id,
			HttpServletRequest request) throws SQLException {
		MemberVO member = (MemberVO) request.getSession().getAttribute("loginUser");

		String message_receiver = member.getMember_id();

		String url = "message/notReadMessage.page";

		Map<String, Object> dataMap = service.receiveMailBox(cri, message_receiver);

		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);

		return mnv;
	}

	@RequestMapping("/deleteMessageBox")
	public ModelAndView deleteMessageBox(SearchCriteria cri, ModelAndView mnv, String member_id,
			HttpServletRequest request) throws SQLException {
		MemberVO member = (MemberVO) request.getSession().getAttribute("loginUser");
		String url = "message/deleteMessageBox.page";

		Map<String, Object> dataMap = service.allMessageList(cri);
		mnv.addAllObjects(dataMap);
		mnv.setViewName(url);

		return mnv;
	}

	@RequestMapping("/removeReceiveMessage")
	public void removeReceiveMessage(MessageVO message, HttpServletResponse response, HttpServletRequest request, String message_no)
			throws Exception {
		
		
		
		String messagefileUploadPath = this.messagefileUploadPath;

		List<AttachToMessageVO> attachList = attachToMessageDAO.selectAttachByMessageNo(message_no);

		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();

		try {
			service.deleteReceiveMailBox(message);

			if (attachList != null) {
				for (AttachToMessageVO attach : attachList) {
					File target = new File(attach.getUpload_path(), attach.getFile_name());
					if (target.exists()) {
						target.delete();
					}
				}
			}
			out.println("<script>");
			out.println("alert('삭제되었습니다.')");
			out.println("location.href='" + request.getContextPath() + "/message/list'");
			out.println("</script>");
		} catch (SQLException e) {
			out.println("<script>");
			out.println("alert('삭제가 실패했습니다.');");
			out.println("history.go(-1)");
			out.println("</script>");
		}
	}

	@RequestMapping("removeSendMessage")
	public void removeSendMessage(MessageVO message, HttpServletResponse response, HttpServletRequest request, String message_no)
			throws Exception {
		String messagefileUploadPath = this.messagefileUploadPath;

		List<AttachToMessageVO> attachList = attachToMessageDAO.selectAttachByMessageNo(message_no);

		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();

		try {
			service.deleteSendMailBox(message);

			if (attachList != null) {
				for (AttachToMessageVO attach : attachList) {
					File target = new File(attach.getUpload_path(), attach.getFile_name());
					if (target.exists()) {
						target.delete();
					}
				}
			}
			out.println("<script>");
			out.println("alert('삭제되었습니다.')");
			out.println("location.href='" + request.getContextPath() + "/message/sendMessageBox'");
			out.println("</script>");
		} catch (SQLException e) {
			out.println("<script>");
			out.println("alert('삭제를 실패했습니다.');");
			out.println("history.go(-1)");
			out.println("</script>");
		}
	}

}
