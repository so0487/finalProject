package kr.or.ddit.exam.controller;

import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;

import kr.or.ddit.dto.ExamVO;
import kr.or.ddit.dto.ExampleVO;
import kr.or.ddit.dto.TestVO;
import kr.or.ddit.exam.service.ExamCategoryService;
import kr.or.ddit.exam.service.ExamService;
import kr.or.ddit.exam.service.ExampleService;
import kr.or.ddit.request.SearchCriteria;
import kr.or.ddit.test.service.TestService;

@Controller
@RequestMapping("/exam")
public class ExamController {
	
	@Autowired
	private ExamService examService;
	
	@Autowired
	private TestService testService;
	
	@Autowired
	private ExampleService exampleService;

	@Autowired
	private ExamCategoryService examCategoryService;
	
	
	@RequestMapping("/main")
	public String main() throws Exception{
		return "exam/main.open";
	}
	

	
	@RequestMapping("/registForm")
	public ModelAndView registForm(ModelAndView mnv, HttpServletResponse response, SearchCriteria cri) throws Exception {
		
		List<TestVO> testList = testService.getTestList(cri);		
		mnv.addObject("testList", testList);
		
		
		mnv.setViewName("exam/registForm.page");
//		mnv.setViewName("exam/test.open");
		return mnv;
	}
	
	@RequestMapping("/regist")
	public void regist(ExamVO exam, HttpServletResponse response, int[] exam_no, String[] exam_category_no, String[] exam_title, int[] exam_point, String[] answer,
			String[] example_no, int[] exam_no2, String[] example_content, String[] exam_answer, String[] exam_no3, String[] test_no) throws Exception {
		System.out.println("exam no : "+exam_no);
		System.out.println("test no	: "+test_no);
		System.out.println("exam cate : "+exam_category_no);
		System.out.println("exam title : "+exam_title);
		System.out.println("exam point : "+exam_point);
		System.out.println("exam exam_answer" +exam_answer);
		System.out.println("exam exam_no3" +exam_no3);
		
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		String message="";
		try {
			//문제추가
//			ExamVO exam2 = new ExamVO();
			for (int i = 0; i < exam_no.length; i++) {
				exam.setExam_number(exam_no[i]);
				exam.setTest_no(test_no[i]);
				exam.setExam_category_no(exam_category_no[i]);
				exam.setExam_title(exam_title[i]);
				exam.setExam_point(exam_point[i]);
				exam.setExam_answer(exam_answer[i]);
				examService.registExam(exam);
			}
			//객관식 문제항목추가
			ExampleVO example = new ExampleVO();
			Map<String, Object> ExampleExam_no = new HashMap<>();
			ExampleExam_no.put("test_no", test_no[0]); //시험지 번호
			if(exam_no2!=null) {
				for (int i = 0; i < exam_no2.length; i++) {
					example.setExample_content(example_content[i]);
					example.setExample_number(i+1);				
					ExampleExam_no.put("exam_number", exam_no2[i]);
					System.out.println(ExampleExam_no);
					String examVoNo = examService.getExamByNumber(ExampleExam_no); //시험지내의 문제번호를 가지고 문제번호pk를 가져와서 문항을 문제에 등록				
					example.setExam_no(examVoNo);
					exampleService.registExample(example);
				}
			}
			
			//주관식 문제항목추가
//			if(exam_no3!=null) {
//				for (int i = 0; i < exam_no3.length; i++) {
//					example.setExample_content(example_content2[i]);
//					example.setExample_number(i+99);				
//					ExampleExam_no.put("exam_number", exam_no3[i]);				
//					String examVoNo = examService.getExamByNumber(ExampleExam_no); //시험지내의 문제번호를 가지고 문제번호pk를 가져와서 문항을 문제에 등록				
//					example.setExam_no(examVoNo);
//					exampleService.registExample(example);
//				}
//			}
				
			
			message="시험지 등록이 완료되었습니다..";
			out.println("<script>");
			out.println("alert('"+message+"');");
			out.println("window.location.href='registForm';");
			out.println("</script>");
		} catch(SQLException e){
			e.printStackTrace();
			message="시험지등록에 실패했습니다.";
			out.println("<script>");
			out.println("alert('"+message+"');");
			out.println("</script>");
		}		
			out.close();
	}
	
	@RequestMapping("/list")
	public ModelAndView list(SearchCriteria cri, ModelAndView mnv, String test_no) throws Exception{
//		List<ExamVO> examList = examService.getExamByTestNo(test_no);
		List<ExamVO> examList = examService.getExamList(cri);
		List<ExampleVO> exampleList = exampleService.getExampleList(cri);		
		List<TestVO> testList = testService.getTestList(cri);
		
//		mnv.addObject("examList", examList);
		Map<String,Object> list = new HashMap<>();
		list.put("examList2", examList);
		list.put("exampleList", exampleList);
		list.put("testList", testList);
		
		mnv.addAllObjects(list);
		mnv.setViewName("exam/list.page");
		
		return mnv;
	}
	
	@RequestMapping("/listStu")
	public ModelAndView listStu(SearchCriteria cri, ModelAndView mnv, String test_no) throws Exception{
//		List<ExamVO> examList = examService.getExamByTestNo(test_no);
		List<ExamVO> examList = examService.getExamList(cri);
		List<ExampleVO> exampleList = exampleService.getExampleList(cri);		
		List<TestVO> testList = testService.getTestList(cri);
		
//		mnv.addObject("examList", examList);
		Map<String,Object> list = new HashMap<>();
		list.put("examList2", examList);
		list.put("exampleList", exampleList);
		list.put("testList", testList);
		
		mnv.addAllObjects(list);
		mnv.setViewName("exam/listStu.page");
		
		return mnv;
	}
	
	@RequestMapping("/detail")
	public ModelAndView detail(String exam_no, SearchCriteria cri, ModelAndView mnv) {
		return null;
	}
	
	@RequestMapping("/modifyForm")
	public ModelAndView modifyForm(String exam_no, SearchCriteria cri, ModelAndView mnv) {
		return null;
	}
	
	@RequestMapping("/modify")
	public void modify(ExamVO exam, HttpServletResponse response, int[] exam_no, String[] exam_category_no, String[] exam_title, int[] exam_point, String[] answer,
			String[] example_no, int[] exam_no2, String[] example_content, String[] exam_answer, String[] exam_no3, String[] test_no, String[] exam_id, String[] exam_id2) throws Exception {
		System.out.println("exam no : "+exam_no);
		System.out.println("test no	: "+test_no);
		System.out.println("exam cate : "+exam_category_no);
		System.out.println("exam title : "+exam_title);
		System.out.println("exam point : "+exam_point);
		System.out.println("exam exam_answer" +exam_answer);
		System.out.println("exam exam_no3" +exam_no3);
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		String message="";
		
		examService.removeExam(test_no[0]);
		
		try {
			for (int i = 0; i < exam_no.length; i++) {
//				exam.setExam_no(exam_id[i]);
				exam.setExam_number(exam_no[i]);
				exam.setTest_no(test_no[i]);
				exam.setExam_category_no(exam_category_no[i]);
				exam.setExam_title(exam_title[i]);
				exam.setExam_point(exam_point[i]);
				exam.setExam_answer(exam_answer[i]);
				examService.registExam(exam);
			}
			//객관식 문제항목추가
			ExampleVO example = new ExampleVO();
			Map<String, Object> ExampleExam_no = new HashMap<>();
			ExampleExam_no.put("test_no", test_no[0]); //시험지 번호z`
//			System.out.println(exam_no2.length);
			int y = 1;
			String temp = null;
			if(exam_no2!=null) {
				for (int i = 0; i < exam_no2.length; i++) {
//					System.out.println(exam_no2[i]);
//					example.setExam_no(exam_id2[i]);	
					example.setExample_content(example_content[i]);
					ExampleExam_no.put("exam_number", exam_no2[i]);					
					String examVoNo = examService.getExamByNumber(ExampleExam_no); //시험지내의 문제번호를 가지고 문제번호pk를 가져와서 문항을 문제에 등록	
					example.setExam_no(examVoNo);
					if(i!=0) {
						String temp2 = examVoNo;
						if(temp.equals(temp2)) {
							y+=1;
						}else {
							y=1;
						}					
					}
					example.setExample_number(y);			
					exampleService.registExample(example);
					temp = examVoNo;
				}
			}		
		

			
			message="시험지 수정이 완료되었습니다..";
			out.println("<script>");
			out.println("alert('"+message+"');");
			out.println("window.location.href='list.do';");
			out.println("</script>");
		} catch(SQLException e){
			e.printStackTrace();
			message="시험지 수정에 실패했습니다.";
			out.println("<script>");
			out.println("alert('"+message+"');");
			out.println("</script>");
		}		
			out.close();
		}
	
	@RequestMapping("/remove")
	public void remove(String exam_no, @ModelAttribute("cri") SearchCriteria cri, HttpServletResponse response) {
		
	}
		
	
	@RequestMapping(value = "/testSubmit", method = RequestMethod.POST)
	public ResponseEntity<String> testSubmit(HttpServletRequest request, @RequestParam(value="scoring_input[]")String[] scoring_input,  @RequestParam(value="exam_no[]")String[] exam_no) {
		for (int i = 0; i < exam_no.length; i++) {
			System.out.println(exam_no[i]+" : "+scoring_input[i]);
		}
		return null;
	}
	
	@RequestMapping("/numberCheck")
	public void numberCheck() {
		
	}
	
}
