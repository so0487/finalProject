package kr.or.ddit.member.controller;

import java.io.File;
import java.io.PrintWriter;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.dto.MemberVO;
import kr.or.ddit.member.service.MemberService;
import kr.or.ddit.member.service.StudentService;
import kr.or.ddit.request.MailRequestCommand;
import kr.or.ddit.request.MemberModifyRequest;
import kr.or.ddit.request.MimeAttachNotifier;
import kr.or.ddit.request.SearchCriteria;
import kr.or.ddit.util.SecurityUtil;



@Controller
@RequestMapping("/member")
public class MemberController {
	
	@Autowired
	private MemberService memberService;
	
	@Autowired
	private StudentService studentService;
	
	@RequestMapping("/main")
	public String main() throws Exception{
		return "member/main.open";
	}
	
	@Resource(name="picturePath")
	private String picturePath;
	
	@RequestMapping(value="/picture", method=RequestMethod.POST)
	@ResponseBody
	public ResponseEntity<String> picture(@RequestParam("pictureFile") MultipartFile multi,
										String oldPicture) throws Exception{
		ResponseEntity<String> entity=null;
		
		String result="";
		HttpStatus status = null;
		
		//파일유무확인
		if((result=savePicture(oldPicture, multi))==null) {
			result="업로드에 실패했습니다.";
			status = HttpStatus.BAD_REQUEST;
		}else {		
			status = HttpStatus.OK;
		}
		
		entity =new ResponseEntity<String>(result, status);
		
		return entity;
	}
	
	@RequestMapping("/registForm")
	public String registForm(String error, HttpServletResponse response) {
		String url = "member/registForm.open";
		
		return url;
	}
	
	@RequestMapping("/idCheck")
	public ResponseEntity<String> idCheck(String member_id){
		String result="";
		HttpStatus status = HttpStatus.OK;
		
		try {
			MemberVO member = memberService.getMember(member_id);
			if(member != null) {
				result = "duplicated";
			}			
		} catch(SQLException e){
			status = HttpStatus.BAD_REQUEST;
		}
		return new ResponseEntity<String>(result,status);
	}
	
	@RequestMapping("/emailCheck")
	public ResponseEntity<String> emailCheck(String member_email){
		String result="";
		HttpStatus status = HttpStatus.OK;

		try {
			MemberVO member = memberService.getMemberByEmail(member_email);
			if(member != null) {
				result = "duplicated";
			}			
		} catch(SQLException e){
			status = HttpStatus.BAD_REQUEST;
		}
		return new ResponseEntity<String>(result,status);
	}
	

	@RequestMapping(value = "/regist", method = RequestMethod.POST)
	public void RegisterPost(MemberVO member, String[] member_phone, String[] member_email, String[] member_address, Model model,  HttpServletResponse response, RedirectAttributes rttr, HttpServletRequest request, HttpSession session) throws Exception {
		String tempPhone ="";
		String tempAddress ="";
		String tempEmail ="";
		String tempPwd ="";
		// 핸드폰 번호 저장
		for(String data : member_phone) {
			//System.out.println(data);
			tempPhone+=data;
		}
		
		// 주소 이어서 저장
//		for(String data : member_address) {
//			//System.out.println(data);
//			tempAddress+=data+" ";
//		}

		// 이메일 주소 형식으로 저장
		tempEmail = member_email[0] + "@" + member_email[1];
		
		// 비밀번호 암호화
		SecurityUtil scUtil = new SecurityUtil();
		tempPwd = scUtil.encrypt(member.getMember_pwd());
		
		member.setMember_pwd(tempPwd);
		member.setMember_phone(tempPhone);
//		member.setMember_address(tempAddress);
		member.setMember_email(tempEmail);
		
		
		response.setContentType("text/html;charset=utf-8");
		PrintWriter out = response.getWriter();
		
		String message="";
		try {
			memberService.regist(member);			
			
			message="회원등록이 되었습니다. 이메일 인증 후 사용해주세요.";
			out.println("<script>");
			out.println("alert('"+message+"');");
			out.println("window.location.href='../common/loginForm';");
			out.println("</script>");
		} catch(SQLException e){
			e.printStackTrace();
			message="회원등록이 실패했습니다.";
			out.println("<script>");
			out.println("alert('"+message+"');");
			out.println("</script>");
		}		
			out.close();
	}
	
	
	
	@RequestMapping(value = "/emailConfirm", method = RequestMethod.GET)
	public String emailConfirm(MemberVO member, String member_email, Model model) throws Exception { // 이메일인증
		memberService.userAuth(member_email);
		model.addAttribute("member_email", member_email);
		studentService.registJoinStudent(member);

		return "/member/success.open";
	}

	
	@RequestMapping("/list")
	public String list(SearchCriteria cri, Model model) {
		return null;
	}
	
	@RequestMapping("/detail")
	public ModelAndView detail(String member_id, ModelAndView mnv) {
		return null;
	}
	
	@RequestMapping("/getPicture")
	public ResponseEntity<String> getPicture(@RequestParam("pictureFile") MultipartFile multi, String oldPicture){
		return null;
	}
	
	@RequestMapping("/modifyForm")
	public ModelAndView modifyForm(String member_id, ModelAndView mnv) {
		return null;
	}
	
	@RequestMapping("/modify")
	public void modify(MemberModifyRequest modifyReq, MultipartFile picture, HttpSession session,HttpServletResponse response) {
		
	}
	
	@RequestMapping("/remove")
	public ModelAndView remove(String member_id, HttpSession session, ModelAndView mnv) {
		return mnv;		
	}
	
	@RequestMapping("/status")
	public ModelAndView status(String member_id, HttpSession session, ModelAndView mnv) {
		return mnv;	
	}
	
	
	//사진등록 메서드
	private String savePicture(String oldPicture, MultipartFile multi)throws Exception{
		String fileName = null;
		
		//파일유무확인
		if(!(multi==null || multi.isEmpty() || multi.getSize() > 1024 * 1024 * 5)) {
				
			//파일저장폴더설정
			String uploadPath = picturePath;
			fileName = UUID.randomUUID().toString().replace("-", "")+".jpg";
			File storeFile = new File(uploadPath,fileName);
			
			//local HDD 에 저장
	        multi.transferTo(storeFile);  
       
	        if(!oldPicture.isEmpty()) {
	           File oldFile = new File(uploadPath, oldPicture);
	           if(oldFile.exists()) {
	              oldFile.delete();
	           }
	        }	
		}				
		return fileName; 
	}		

	
}
